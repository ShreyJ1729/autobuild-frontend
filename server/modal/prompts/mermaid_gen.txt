<<|OUTPUT|>> count = 4

<<|INPUT|>>
A frontend application built using React in Typescript that is a single-room chat app that allows users to send messages to other users on the website. Socket.io is used for real-time communication and recoil is used for state management.

<<|OUTPUT|>>
graph TD;
%% UI components
App["App.ts"]
ChatWindow["ChatWindow.ts"]
ChatHeader["ChatHeader.ts"]
ChatBody["ChatBody.ts"]
ChatInput["ChatInput.ts"]
ChatMessage["ChatMessage.ts"]

%% UI component connections
App --> |renders|ChatWindow
ChatWindow --> |renders|ChatHeader
ChatWindow --> |renders|ChatBody
ChatWindow --> |renders|ChatInput
ChatBody --> |iteratively renders|ChatMessage

%% UI component props
ChatHeaderProps["roomName:string"]
ChatMessageProps["author:string,\ntext:string,\ntimestamp:string"]

%% UI component function definitions
ChatInput-sendMessage["sendMessage"]

%% UI component function connections
ChatInput --> |calls|ChatInput-sendMessage

%% utils/socket.io
utils/socket.io[utils/socket.io.ts]
socket["socket.io-client"]
utils/socket.io -.-> |socket|socket

%% utils/recoil
utils/recoil[utils/recoil.ts]
messagesAtom["[{id:string,\nauthor:string,\ntext:string,\ntimestamp:string},...]"]
utils/recoil -.-> |messagesAtom|messagesAtom

%% recoil function connections
ChatInput-sendMessage --> |sends through socket|utils/socket.io
utils/socket.io --> |updates messages|messagesAtom
ChatBody --> |reads|messagesAtom

%% UI component props connections
ChatHeader -.-> |props|ChatHeaderProps
ChatMessage -.-> |props|ChatMessageProps

<<|INPUT|>>
A frontend application built using React in Typescript that allows users to create, edit, and delete notes. The app includes several components, such as a header, a note list, a note view, and a note form, as well as utility functions for managing notes using localStorage and a RESTful API. Users can add new notes, search for notes, view and edit existing notes, and delete notes they no longer need.

<<|OUTPUT|>>
graph TD;
%% UI components
App["App.js"]
Header["Header.js"]
NoteList["NoteList.js"]
NoteListItem["NoteListItem.js"]
NoteView["NoteView.js"]
NoteForm["NoteForm.js"]

%% UI component connections
App --> |renders|Header
App --> |renders|NoteList
NoteList --> |iteratively renders|NoteListItem
App --> |renders|NoteView
NoteView --> |renders|NoteForm

%% UI component props
HeaderProps["addNote:function,\nsearchNotes:function"]
NoteListProps["notes:array,\nselectedNoteId:string,\nselectNote:function"]
NoteListItemProps["noteId:string,\ntitle:string,\ncontent:string,\nupdatedAt:string,\nisSelected:boolean,\nselectNote:function"]
NoteViewProps["noteId:string,\ntitle:string,\ncontent:string,\nupdatedAt:string,\neditNote:function,\ndeleteNote:function"]
NoteFormProps["noteId:string,\ntitle:string,\ncontent:string,\nsaveNote:function"]

%% UI component function definitions
Header-addNote["addNote"]
Header-searchNotes["searchNotes"]
NoteList-selectNote["selectNote"]
NoteView-editNote["editNote"]
NoteView-deleteNote["deleteNote"]
NoteForm-saveNote["saveNote"]

%% UI component function connections
Header --> |calls|Header-addNote
Header --> |calls|Header-searchNotes
NoteList --> |calls|NoteList-selectNote
NoteView --> |calls|NoteView-editNote
NoteView --> |calls|NoteView-deleteNote
NoteForm --> |calls|NoteForm-saveNote

%% utils/localStorage
utils/localStorage[utils/localStorage.js]
notesKey["notes"]
utils/localStorage -.-> |localStorage|localStorage

%% utils/markdown
utils/markdown[utils/markdown.js]
convertMarkdown["convertMarkdown"]
utils/markdown -.-> |markdown|marked

%% utils/api
utils/api[utils/api.js]
getAllNotes["getAllNotes"]
getNoteById["getNoteById"]
createNote["createNote"]
updateNote["updateNote"]
deleteNote["deleteNote"]
utils/api -.-> |axios|axios

%% utils/api function connections
getAllNotes --> |fetches notes from|utils/api
getNoteById --> |fetches note from|utils/api
createNote --> |creates note using|utils/api
updateNote --> |updates note using|utils/api
deleteNote --> |deletes note using|utils/api

%% utils/localStorage function connections
getAllNotes --> |saves notes to|utils/localStorage
getNoteById --> |reads notes from|utils/localStorage
createNote --> |saves notes to|utils/localStorage
updateNote --> |saves notes to|utils/localStorage
deleteNote --> |saves notes to|utils/localStorage

%% UI component props connections
Header -.-> |props|HeaderProps
NoteList -.-> |props|NoteListProps
NoteListItem -.-> |props|NoteListItemProps
NoteView -.-> |props|NoteViewProps
NoteForm -.-> |props|NoteFormProps

<<|INPUT|>>
A frontend application built using React in Typescript that is a collaborative whiteboard app that allows users to draw on a canvas and share their drawings with other users on the website. Socket.io is used for real-time communication and recoil is used for state management.

<<|OUTPUT|>>
graph TD;

%% UI components
App["App.ts"]
Canvas["Canvas.ts"]

%% UI component connections
App --> |renders|Canvas

%% UI component props
CanvasProps["canvasRef:Ref,\ndrawingMode:boolean,\nsetColor:function,\nsetLineWidth:function"]

%% UI component function definitions
Canvas-setColor["setColor"]
Canvas-setLineWidth["setLineWidth"]

%% UI component function connections
Canvas --> |calls|Canvas-setColor
Canvas --> |calls|Canvas-setLineWidth

%% utils/socket.io
utils/socket.io[utils/socket.io.ts]
socket["socket.io-client"]
utils/socket.io -.-> |socket|socket

%% utils/recoil
utils/recoil[utils/recoil.ts]
linesAtom["[{id:string,\npoints:[{x:number,\ny:number}],\ncolor:string,\nlineWidth:number},...]"]
utils/recoil -.-> |linesAtom|linesAtom

%% recoil function connections
utils/socket.io --> |updates linesAtom|linesAtom
Canvas --> |reads and writes to|linesAtom

%% UI component props connections
Canvas -.-> |props|CanvasProps
<<|END|>>
<<|DESCRIPTION|>>
{{DESCRIPTION}}
<<|OUTPUT|>>